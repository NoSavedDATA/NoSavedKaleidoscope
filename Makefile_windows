CXX := clang++
CXXFLAGS := -O3 -rdynamic -IC:/llvm/include -std=c++17 -mavx -w \
            -D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH -flto -finline-functions -funroll-loops -fuse-ld=lld \
			-L"C:/Program Files (x86)/Windows Kits/10/Lib/10.0.22621.0/um/x64" \
			-lkernel32 -luser32 -lgdi32 -lws2_32 \
			-DNOMINMAX


#SRCFLAGS := -MD -D_MT -D_DLL


# List all LLVM libs you need here (adjust path style and libs)
LLVM_LIBS := \
    C:/llvm/lib/LLVMCore.lib \
    C:/llvm/lib/LLVMSupport.lib \
    C:/llvm/lib/LLVMOrcJIT.lib \
    C:/llvm/lib/LLVMX86CodeGen.lib \
    C:/llvm/lib/LLVMDebugInfoDWARF.lib \
    C:/llvm/lib/LLVMBinaryFormat.lib \
    C:/llvm/lib/LLVMMC.lib \
    C:/llvm/lib/LLVMMCParser.lib \
    C:/llvm/lib/LLVMDemangle.lib \
    C:/llvm/lib/LLVMTarget.lib \
    C:/llvm/lib/LLVMObject.lib \
    C:/llvm/lib/LLVMTargetParser.lib \
    C:/llvm/lib/LLVMTextAPI.lib

LLVM_LIBS := $(wildcard C:/llvm/lib/*.lib) -lntdll


LIBS := $(LLVM_LIBS)


# Directories
LIB_PARSER_OBJ_DIR = lib_parser_obj
LIB_PARSER_SRC_DIR = lib_parser
OBJ_DIR = obj
BIN_DIR = bin
SRC_DIR = src
LIB_DIR := obj_static




# Recursively get all .cpp in SRC_DIR
CXX_SRC := $(wildcard $(SRC_DIR)/**/*.cpp) $(wildcard $(SRC_DIR)/*.cpp)


# Object files
CXX_OBJ := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.obj,$(CXX_SRC))
CXX_DIR := $(sort $(dir $(CXX_OBJ)))

OBJ_DIRS := $(sort $(CXX_DIR))

# Same for lib parser
LIB_PARSER_SRC := $(wildcard $(LIB_PARSER_SRC_DIR)/*.cpp)
LIB_PARSER_OBJ := $(patsubst $(LIB_PARSER_SRC_DIR)/%.cpp,$(LIB_PARSER_OBJ_DIR)/%.obj,$(LIB_PARSER_SRC))


# Executable name
LIB_PARSER := bin/lib_parser.exe
OBJ := bin/nsk.exe
SRC := toy.cpp

.PHONY: prebuild

BUILD_FLAG := .build_flag





$(info var is: ${OBJ_DIRS})
$(foreach dir, $(OBJ_DIRS), \
  $(info var is: $(dir)) \
  $(shell md "$(dir)" 2>nul); \
)

$(shell md $(BIN_DIR) 2>nul;)
$(shell md "$(LIB_DIR)" 2>nul;)


$(shell md "$(LIB_PARSER_OBJ_DIR)" 2>nul;)




all: prebuild $(CXX_OBJ) $(OBJ) check_done


$(OBJ_DIR)/%.obj: $(SRC_DIR)/%.cpp | prebuild
	$(CXX) $(CXXFLAGS) $(SRCFLAGS) -MMD -MP -c -o $@ $<


$(OBJ): $(SRC) $(CXX_OBJ)
	$(CXX) $(CXXFLAGS) $(SRCFLAGS) $(LDFLAGS) $(SRC) $(CXX_OBJ) $(LIBS) $(OTHER_FLAGS) -MMD -MP -o $(OBJ) 
	@echo "\033[1;32m\nBuild completed [âœ“]\n\033[0m"
	@type nul > $(BUILD_FLAG)


prebuild: $(LIB_PARSER)
	@echo ">>> PREBUILD STEP <<<"
	$(shell ./bin/lib_parser.exe)

$(LIB_PARSER_OBJ_DIR)/%.obj: $(LIB_PARSER_SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

$(LIB_PARSER): $(LIB_PARSER_OBJ)
	$(CXX) $(CXXFLAGS) $(LIB_PARSER_SRC) -o $(LIB_PARSER)
	@echo "------------PREBUILD DONE DEON DEONDEON DEON ODENDEON"



check_done:
	@if not exist $(BUILD_FLAG) ( \
		echo [1;33mNo changes found [ ][0m \
	)
	@del /Q $(BUILD_FLAG) 2>nul

clean:
	rmdir /s /q $(BIN_DIR) $(OBJ_DIR) $(LIB_PARSER_OBJ_DIR)

# Track dependencies
-include $(CXX_OBJ:.obj=.d)



