#clang++-19 -g -O3 -rdynamic toy.cu `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` --cuda-path="/usr/local/cuda-12.1" --cuda-gpu-arch=sm_89
#-L"/usr/local/cuda-12.1/lib64" -I"/usr/local/cuda-12.1/include" -I/usr/include/eigen3 -lcudart_static -lcublas -lcublasLt -ldl -lrt -pthread
#-D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH -flto -finline-functions -funroll-loops -lcudnn -lopencv_imgcodecs -lopencv_imgproc -lopencv_core -w -o bin/nsk

CXX := clang++
CXXFLAGS := -g -O3 -rdynamic -IC:/llvm/include -std=c++17 -mavx -w \
            -D_ALLOW_COMPILER_AND_STL_VERSION_MISMATCH -flto -finline-functions -funroll-loops -fuse-ld=lld 

# List all LLVM libs you need here (adjust path style and libs)
LLVM_LIBS := \
    C:/llvm/lib/LLVMCore.lib \
    C:/llvm/lib/LLVMSupport.lib \
    C:/llvm/lib/LLVMOrcJIT.lib \
    C:/llvm/lib/LLVMX86CodeGen.lib \
    # add others you need

# System libs for Windows, adjust as needed
SYSTEM_LIBS := kernel32.lib user32.lib gdi32.lib ws2_32.lib


LIBS := $(LLVM_LIBS) $(SYSTEM_LIBS)


# Directories
LIB_PARSER_OBJ_DIR = lib_parser_obj
LIB_PARSER_SRC_DIR = lib_parser
OBJ_DIR = obj
BIN_DIR = bin
SRC_DIR = src
LIB_DIR := obj_static




# Recursively get all .cpp in SRC_DIR
CXX_SRC := $(wildcard $(SRC_DIR)/**/*.cpp)

# Object files
CXX_OBJ := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.obj,$(CXX_SRC))
CXX_DIR := $(sort $(dir $(CXX_OBJ)))

OBJ_DIRS := $(sort $(CXX_DIR))

# Same for lib parser
LIB_PARSER_SRC := $(wildcard $(LIB_PARSER_SRC_DIR)/*.cpp)
LIB_PARSER_OBJ := $(patsubst $(LIB_PARSER_SRC_DIR)/%.cpp,$(LIB_PARSER_OBJ_DIR)/%.obj,$(LIB_PARSER_SRC))


# Executable name
LIB_PARSER := bin/lib_parser.exe
OBJ := bin/nsk.exe
SRC := toy.cpp

.PHONY: prebuild

BUILD_FLAG := .build_flag





$(info var is: ${OBJ_DIRS})
$(foreach dir, $(OBJ_DIRS), \
  $(info var is: $(dir)) \
  $(shell md "$(dir)" 2>nul); \
)

$(shell md $(BIN_DIR) 2>nul;)
$(shell md "$(LIB_DIR)" 2>nul;)


$(shell md "$(LIB_PARSER_OBJ_DIR)" 2>nul;)




all: prebuild $(CXX_OBJ) $(OBJ) check_done


$(OBJ_DIR)/%.obj: $(SRC_DIR)/%.cpp | prebuild
	$(CXX) $(CXXFLAGS) -MMD -MP -c -o $@ $<


$(OBJ): $(SRC) $(CXX_OBJ)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(SRC) $(CXX_OBJ) $(LIBS) $(OTHER_FLAGS) -MMD -MP -o $(OBJ) 
	@echo "\033[1;32m\nBuild completed [âœ“]\n\033[0m"
	@touch $(BUILD_FLAG)


prebuild: $(LIB_PARSER)
	@echo ">>> PREBUILD STEP <<<"
	$(shell ./bin/lib_parser.exe)

$(LIB_PARSER_OBJ_DIR)/%.obj: $(LIB_PARSER_SRC_DIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

$(LIB_PARSER): $(LIB_PARSER_OBJ)
	$(CXX) $(CXXFLAGS) $(LIB_PARSER_SRC) -o $(LIB_PARSER)
	@echo "------------PREBUILD DONE DEON DEONDEON DEON ODENDEON"



check_done:
	@if [ ! -f $(BUILD_FLAG) ]; then \
		echo "\n\n\033[1;33mNo changes found [ ]\n\033[0m"; \
	fi
	@rm -f $(BUILD_FLAG)

clean:
	rm -rf $(BIN_DIR) $(OBJ_DIR) $(LIB_PARSER_OBJ_DIR)

# Track dependencies
-include $(CXX_OBJ:.obj=.d)

